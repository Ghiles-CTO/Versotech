/**
 * Advanced Excel Export Utility
 * Provides formatted Excel exports with multiple sheets, styling, and formulas
 */

import { format } from 'date-fns'

export interface ExportColumn {
  key: string
  label: string
  type: 'string' | 'number' | 'currency' | 'date' | 'boolean' | 'percent'
  format?: string
  width?: number
}

export interface ExportSheet {
  name: string
  columns: ExportColumn[]
  data: Record<string, any>[]
  summary?: Record<string, any>
}

export interface ExportOptions {
  filename: string
  sheets: ExportSheet[]
  includeMetadata?: boolean
  author?: string
}

export class ExcelExporter {
  /**
   * Export data to CSV format (for simple exports)
   */
  static toCSV(sheet: ExportSheet): string {
    const headers = sheet.columns.map(col => col.label)
    const rows = sheet.data.map(row =>
      sheet.columns.map(col => {
        const value = row[col.key]
        return this.formatValue(value, col.type, col.format)
      })
    )

    // Build CSV content
    const csvContent = [
      headers.join(','),
      ...rows.map(row =>
        row.map(cell => {
          // Escape cells containing commas or quotes
          const cellStr = String(cell ?? '')
          if (cellStr.includes(',') || cellStr.includes('"') || cellStr.includes('\n')) {
            return `"${cellStr.replace(/"/g, '""')}"`
          }
          return cellStr
        }).join(',')
      )
    ].join('\n')

    return csvContent
  }

  /**
   * Generate Excel-compatible CSV with multiple sheets (simplified)
   */
  static toMultiSheetCSV(options: ExportOptions): Blob {
    let content = ''

    // Add metadata sheet if requested
    if (options.includeMetadata) {
      content += 'METADATA\n'
      content += `Export Date,${format(new Date(), 'yyyy-MM-dd HH:mm:ss')}\n`
      if (options.author) {
        content += `Generated By,${options.author}\n`
      }
      content += `Sheets,${options.sheets.length}\n`
      content += '\n\n'
    }

    // Add each sheet
    options.sheets.forEach((sheet, index) => {
      if (index > 0) content += '\n\n'

      content += `SHEET: ${sheet.name}\n`
      content += this.toCSV(sheet)

      // Add summary if provided
      if (sheet.summary) {
        content += '\n\nSUMMARY\n'
        Object.entries(sheet.summary).forEach(([key, value]) => {
          content += `${key},${value}\n`
        })
      }
    })

    return new Blob([content], { type: 'text/csv;charset=utf-8;' })
  }

  /**
   * Format value based on type
   */
  private static formatValue(value: any, type: ExportColumn['type'], format?: string): string {
    if (value === null || value === undefined) return ''

    switch (type) {
      case 'currency':
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: format || 'USD',
          minimumFractionDigits: 0,
          maximumFractionDigits: 0
        }).format(Number(value))

      case 'number':
        return new Intl.NumberFormat('en-US', {
          minimumFractionDigits: 0,
          maximumFractionDigits: 2
        }).format(Number(value))

      case 'percent':
        return `${(Number(value) * 100).toFixed(2)}%`

      case 'date':
        try {
          const date = new Date(value)
          return format(date, format || 'yyyy-MM-dd')
        } catch {
          return String(value)
        }

      case 'boolean':
        return value ? 'Yes' : 'No'

      default:
        return String(value)
    }
  }

  /**
   * Download blob as file
   */
  static download(blob: Blob, filename: string) {
    const url = window.URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.href = url
    link.download = filename
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    window.URL.revokeObjectURL(url)
  }

  /**
   * Export investors to formatted Excel
   */
  static exportInvestors(investors: any[], summary: any): Blob {
    const detailSheet: ExportSheet = {
      name: 'Investor Details',
      columns: [
        { key: 'legal_name', label: 'Investor Name', type: 'string', width: 30 },
        { key: 'type', label: 'Type', type: 'string', width: 15 },
        { key: 'email', label: 'Email', type: 'string', width: 30 },
        { key: 'country', label: 'Country', type: 'string', width: 20 },
        { key: 'kyc_status', label: 'KYC Status', type: 'string', width: 15 },
        { key: 'status', label: 'Status', type: 'string', width: 15 },
        { key: 'total_commitment', label: 'Total Commitment', type: 'currency', width: 20 },
        { key: 'total_contributed', label: 'Contributed', type: 'currency', width: 20 },
        { key: 'unfunded_commitment', label: 'Unfunded', type: 'currency', width: 20 },
        { key: 'current_nav', label: 'Current NAV', type: 'currency', width: 20 },
        { key: 'vehicle_count', label: 'Vehicles', type: 'number', width: 10 },
        { key: 'created_at', label: 'Created Date', type: 'date', width: 15 }
      ],
      data: investors,
      summary: {
        'Total Investors': investors.length,
        'Total Commitment': this.formatValue(
          investors.reduce((sum, inv) => sum + (inv.total_commitment || 0), 0),
          'currency'
        ),
        'Total Contributed': this.formatValue(
          investors.reduce((sum, inv) => sum + (inv.total_contributed || 0), 0),
          'currency'
        ),
        'Total NAV': this.formatValue(
          investors.reduce((sum, inv) => sum + (inv.current_nav || 0), 0),
          'currency'
        )
      }
    }

    const summarySheet: ExportSheet = {
      name: 'Summary',
      columns: [
        { key: 'metric', label: 'Metric', type: 'string', width: 30 },
        { key: 'value', label: 'Value', type: 'string', width: 20 }
      ],
      data: [
        { metric: 'Total Investors', value: investors.length },
        { metric: 'Active Investors', value: investors.filter(i => i.status === 'active').length },
        { metric: 'Pending KYC', value: investors.filter(i => i.kyc_status === 'pending').length },
        { metric: 'Institutional', value: investors.filter(i => i.type === 'institutional').length },
        { metric: 'Individual', value: investors.filter(i => i.type === 'individual').length }
      ]
    }

    return this.toMultiSheetCSV({
      filename: `investors-export-${format(new Date(), 'yyyy-MM-dd')}.csv`,
      sheets: [summarySheet, detailSheet],
      includeMetadata: true
    })
  }

  /**
   * Export subscriptions to formatted Excel
   */
  static exportSubscriptions(subscriptions: any[], summary: any): Blob {
    const detailSheet: ExportSheet = {
      name: 'Subscription Details',
      columns: [
        { key: 'subscription_number', label: 'Sub #', type: 'string', width: 15 },
        { key: 'investor_name', label: 'Investor', type: 'string', width: 30 },
        { key: 'vehicle_name', label: 'Vehicle', type: 'string', width: 25 },
        { key: 'commitment', label: 'Commitment', type: 'currency', width: 20 },
        { key: 'currency', label: 'Currency', type: 'string', width: 10 },
        { key: 'status', label: 'Status', type: 'string', width: 15 },
        { key: 'subscription_date', label: 'Subscription Date', type: 'date', width: 15 },
        { key: 'funding_due_at', label: 'Funding Due', type: 'date', width: 15 },
        { key: 'funded_amount', label: 'Funded Amount', type: 'currency', width: 20 },
        { key: 'documents_complete', label: 'Docs Complete', type: 'boolean', width: 15 }
      ],
      data: subscriptions,
      summary: {
        'Total Subscriptions': subscriptions.length,
        'Total Commitment': this.formatValue(
          subscriptions.reduce((sum, sub) => sum + (sub.commitment || 0), 0),
          'currency'
        ),
        'Active Subscriptions': subscriptions.filter(s => s.status === 'active').length,
        'Pending Review': subscriptions.filter(s => s.status === 'pending').length
      }
    }

    const summarySheet: ExportSheet = {
      name: 'Summary',
      columns: [
        { key: 'metric', label: 'Metric', type: 'string', width: 30 },
        { key: 'value', label: 'Value', type: 'string', width: 20 }
      ],
      data: [
        { metric: 'Total Subscriptions', value: subscriptions.length },
        { metric: 'Active', value: subscriptions.filter(s => s.status === 'active').length },
        { metric: 'Pending', value: subscriptions.filter(s => s.status === 'pending').length },
        { metric: 'Total Commitment', value: this.formatValue(
          subscriptions.reduce((sum, s) => sum + (s.commitment || 0), 0),
          'currency'
        )}
      ]
    }

    return this.toMultiSheetCSV({
      filename: `subscriptions-export-${format(new Date(), 'yyyy-MM-dd')}.csv`,
      sheets: [summarySheet, detailSheet],
      includeMetadata: true
    })
  }
}

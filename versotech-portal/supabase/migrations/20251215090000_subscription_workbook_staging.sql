-- Subscription workbook staging tables to support legacy migration ETL.
-- Generated by Codex implementation of docs/subscription_data_migration_plan.md

set check_function_bodies = off;

-- Track each workbook ingestion run for auditing/rollback
create table if not exists public.subscription_workbook_runs (
  id uuid primary key default gen_random_uuid(),
  source_filename text not null,
  source_hash text,
  dry_run boolean default false,
  executed_by text,
  run_state text not null default 'importing' check (run_state in ('importing','loaded','failed')),
  notes text,
  created_at timestamptz not null default now()
);

-- Staged vehicle summary rows from the workbook
create table if not exists public.stg_subscription_summary (
  id uuid primary key default gen_random_uuid(),
  run_id uuid not null references public.subscription_workbook_runs(id) on delete cascade,
  vehicle_code text not null,
  vehicle_name text,
  stage text,
  currency text,
  fx_rate numeric(18,6),
  amount_invested numeric(18,2),
  total_fees numeric(18,2),
  fx_source text,
  comments text,
  source_sheet text not null,
  source_row integer not null,
  raw_data jsonb,
  created_at timestamptz not null default now()
);
create index if not exists stg_subscription_summary_run_idx on public.stg_subscription_summary(run_id);
create index if not exists stg_subscription_summary_vehicle_idx on public.stg_subscription_summary(vehicle_code);

-- Staged investor subscription line items
create table if not exists public.stg_subscription_lines (
  id uuid primary key default gen_random_uuid(),
  run_id uuid not null references public.subscription_workbook_runs(id) on delete cascade,
  vehicle_code text not null,
  sheet_code text,
  investor_first_name text,
  investor_last_name text,
  investor_entity text,
  investor_display_name text,
  nominal_amount numeric(18,2),
  cash_amount numeric(18,2),
  fees_amount numeric(18,2),
  fee_percent numeric(18,6),
  amount_original numeric(18,2),
  currency_original text,
  fx_rate numeric(18,6),
  amount_converted numeric(18,2),
  currency_converted text,
  price_per_share numeric(18,6),
  ownership_percent numeric(18,6),
  order_date date,
  trade_date date,
  settlement_date date,
  status_raw text,
  status_mapped text,
  isin text,
  settlement_location text,
  comments text,
  notes text,
  source_sheet text not null,
  source_row integer not null,
  raw_data jsonb,
  created_at timestamptz not null default now()
);
create index if not exists stg_subscription_lines_run_idx on public.stg_subscription_lines(run_id);
create index if not exists stg_subscription_lines_vehicle_idx on public.stg_subscription_lines(vehicle_code);
create index if not exists stg_subscription_lines_status_idx on public.stg_subscription_lines(status_mapped);

-- Staged tranche/meta rows (VEGINVEST and escrow sheets)
create table if not exists public.stg_subscription_tranches (
  id uuid primary key default gen_random_uuid(),
  run_id uuid not null references public.subscription_workbook_runs(id) on delete cascade,
  vehicle_code text,
  tranche_name text,
  tranche_type text,
  currency text,
  amount numeric(18,2),
  fx_rate numeric(18,6),
  comments text,
  source_sheet text not null,
  source_row integer not null,
  raw_data jsonb,
  created_at timestamptz not null default now()
);
create index if not exists stg_subscription_tranches_run_idx on public.stg_subscription_tranches(run_id);
create index if not exists stg_subscription_tranches_vehicle_idx on public.stg_subscription_tranches(vehicle_code);

-- Track final objects created per staging run for audit/rollback
create table if not exists public.subscription_import_results (
  id uuid primary key default gen_random_uuid(),
  run_id uuid not null references public.subscription_workbook_runs(id) on delete cascade,
  subscription_id uuid references public.subscriptions(id) on delete set null,
  entity_investor_id uuid references public.entity_investors(id) on delete set null,
  investor_deal_holding_id uuid references public.investor_deal_holdings(id) on delete set null,
  investor_id uuid not null,
  vehicle_id uuid not null,
  created_at timestamptz not null default now()
);
create index if not exists subscription_import_results_run_idx on public.subscription_import_results(run_id);

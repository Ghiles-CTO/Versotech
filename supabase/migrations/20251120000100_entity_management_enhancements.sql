-- Entity & Investor management enhancements
-- Auto-generated by Codex

set check_function_bodies = off;
-- Ensure helper function for updated_at exists
create or replace function public.set_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;
-- Stakeholders table (backfill if missing)
create table if not exists public.entity_stakeholders (
  id uuid primary key default gen_random_uuid(),
  vehicle_id uuid references public.vehicles(id) on delete cascade,
  role text not null,
  company_name text,
  contact_person text,
  email text,
  phone text,
  effective_from date default current_date,
  effective_to date,
  notes text,
  created_at timestamptz default now()
);
create index if not exists entity_stakeholders_vehicle_idx on public.entity_stakeholders(vehicle_id);
create index if not exists entity_stakeholders_role_idx on public.entity_stakeholders(role);
alter table public.entity_stakeholders enable row level security;
do $$
begin
  create policy entity_stakeholders_staff_all
    on public.entity_stakeholders
    for all
    using (
      exists (
        select 1 from public.profiles p
        where p.id = auth.uid()
          and p.role::text like 'staff_%'
      )
    )
    with check (
      exists (
        select 1 from public.profiles p
        where p.id = auth.uid()
          and p.role::text like 'staff_%'
      )
    );
exception when duplicate_object then null;
end;
$$;
-- Entity investors link table
create table if not exists public.entity_investors (
  id uuid primary key default gen_random_uuid(),
  vehicle_id uuid references public.vehicles(id) on delete cascade,
  investor_id uuid references public.investors(id) on delete cascade,
  subscription_id uuid references public.subscriptions(id),
  relationship_role text,
  allocation_status text default 'pending',
  invite_sent_at timestamptz,
  created_by uuid references public.profiles(id),
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  notes text,
  unique (vehicle_id, investor_id)
);
create index if not exists entity_investors_vehicle_idx on public.entity_investors(vehicle_id);
create index if not exists entity_investors_investor_idx on public.entity_investors(investor_id);
create index if not exists entity_investors_status_idx on public.entity_investors(allocation_status);
alter table public.entity_investors enable row level security;
create trigger entity_investors_set_updated_at
  before update on public.entity_investors
  for each row
  execute function public.set_updated_at();
do $$
begin
  create policy entity_investors_staff_all
    on public.entity_investors
    for all
    using (
      exists (
        select 1 from public.profiles p
        where p.id = auth.uid()
          and p.role::text like 'staff_%'
      )
    )
    with check (
      exists (
        select 1 from public.profiles p
        where p.id = auth.uid()
          and p.role::text like 'staff_%'
      )
    );
exception when duplicate_object then null;
end;
$$;
do $$
begin
  create policy entity_stakeholders_investor_read
    on public.entity_stakeholders
    for select
    using (
      exists (
        select 1
        from public.entity_investors ei
        where ei.vehicle_id = entity_stakeholders.vehicle_id
          and ei.investor_id in (select public.get_my_investor_ids())
      )
    );
exception when duplicate_object then null;
end;
$$;
do $$
begin
  create policy entity_investors_investor_read
    on public.entity_investors
    for select
    using (
      entity_investors.investor_id in (select public.get_my_investor_ids())
    );
exception when duplicate_object then null;
end;
$$;
alter table public.entity_investors
  alter column allocation_status set default 'pending';
-- Entity flags for health tracking
create table if not exists public.entity_flags (
  id uuid primary key default gen_random_uuid(),
  vehicle_id uuid references public.vehicles(id) on delete cascade,
  flag_type text not null,
  severity text not null default 'medium',
  title text not null,
  description text,
  status text not null default 'open',
  due_date date,
  resolved_at timestamptz,
  resolved_by uuid references public.profiles(id),
  resolution_notes text,
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  is_resolved boolean generated always as (status = 'closed') stored
);
alter table public.entity_flags
  add column if not exists flag_type text,
  add column if not exists severity text default 'warning',
  add column if not exists status text default 'open',
  add column if not exists due_date date,
  add column if not exists resolved_at timestamptz,
  add column if not exists resolved_by uuid references public.profiles(id),
  add column if not exists resolution_notes text,
  add column if not exists updated_at timestamptz default now(),
  add column if not exists is_resolved boolean default false;
create index if not exists entity_flags_vehicle_idx on public.entity_flags(vehicle_id);
create index if not exists entity_flags_status_idx on public.entity_flags(status);
create index if not exists entity_flags_severity_idx on public.entity_flags(severity);
alter table public.entity_flags enable row level security;
create trigger entity_flags_set_updated_at
  before update on public.entity_flags
  for each row
  execute function public.set_updated_at();
do $$
begin
  create policy entity_flags_staff_all
    on public.entity_flags
    for all
    using (
      exists (
        select 1 from public.profiles p
        where p.id = auth.uid()
          and p.role::text like 'staff_%'
      )
    )
    with check (
      exists (
        select 1 from public.profiles p
        where p.id = auth.uid()
          and p.role::text like 'staff_%'
      )
    );
exception when duplicate_object then null;
end;
$$;
do $$
begin
  create policy entity_flags_investor_read
    on public.entity_flags
    for select
    using (
      exists (
        select 1
        from public.entity_investors ei
        where ei.vehicle_id = entity_flags.vehicle_id
          and ei.investor_id in (select public.get_my_investor_ids())
      )
    );
exception when duplicate_object then null;
end;
$$;
-- Subscriptions enhancements
alter table public.subscriptions
  add column if not exists committed_at timestamptz,
  add column if not exists effective_date date,
  add column if not exists funding_due_at date,
  add column if not exists units numeric(28,8),
  add column if not exists acknowledgement_notes text;
alter table public.subscriptions
  add constraint subscriptions_status_check
  check (status = any (array['pending','committed','active','closed','cancelled']));
-- Document external links
alter table public.documents
  add column if not exists external_url text,
  add column if not exists link_type text;
create index if not exists documents_vehicle_idx on public.documents(vehicle_id);
create index if not exists documents_entity_idx on public.documents(entity_id);
create unique index if not exists document_folders_vehicle_name_idx on public.document_folders(vehicle_id, name);
-- Default folder utility function
create or replace function public.ensure_entity_default_folders(p_vehicle_id uuid, p_actor uuid default null)
returns void
language plpgsql
as $$
declare
  folder_names text[] := array['KYC','Legal','Redemption','Operations'];
  folder text;
begin
  foreach folder in array folder_names
  loop
    insert into public.document_folders (vehicle_id, name, path, folder_type, created_by)
    values (p_vehicle_id, folder, concat('/', folder), 'category', p_actor)
    on conflict (vehicle_id, name) do nothing;
  end loop;
end;
$$;
